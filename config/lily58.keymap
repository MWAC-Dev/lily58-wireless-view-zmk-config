/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 7>, <&to 7>;
        };

        arrowfuncs: arrowfuncs {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWFUNCS";
            bindings = <&thin_arrowfunc>, <&thick_arrowfunc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        HRM_L: HRM_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 35 36 37 48 49 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 48 49 50 51 46 47 64 65 66 67 68 52 53 54 71 70 69 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        HMR_R: HMR_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 17 18 19 20 21 29 30 31 32 33 41 42 43 44 45 59 60 61 62 63 75 76 77 78 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 54 55 56 57 58 59 60 61 62 63 73 74 75 76 77 78 79 52 53 54 55 56 70 71 72 69>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parentheses_carrot_L: parentheses_carrot_L {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESES_CARROT_L";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parentheses_carrot_R: parentheses_carrot_R {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESES_CARROT_R";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        square_curly_L: square_curly_L {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_CURLY_L";
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        square_curly_R: square_curly_R {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_CURLY_R";
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        closed_parentheses_carrots: closed_parentheses_carrots {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSED_PARENTHESES_CARROTS";
            bindings = <&closed_parentheses>, <&closed_carrots>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        closed_square_curly: closed_square_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSED_SQUARE_CURLY";
            bindings = <&closed_braces>, <&closed_bracket>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thick_arrowfunc: thick_arrowfunc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "THICK_ARROWFUNC";
        };

        thin_arrowfunc: thin_arrowfunc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "THIN_ARROWFUNC";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        closed_parentheses: closed_parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR>;
            label = "CLOSED_PARENTHESES";
        };

        closed_carrots: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT>;
            label = "NEW_MACRO";
        };

        closed_braces: closed_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE>;
            label = "CLOSED_BRACES";
        };

        closed_bracket: closed_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET>;
            label = "CLOSED_BRACKET";
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace_combo {
            bindings = <&kp BSPC>;
            key-positions = <19 20>;
        };

        delete_combo {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
        };

        p_c_l {
            bindings = <&parentheses_carrot_L>;
            key-positions = <32 31>;
        };

        p_c_r {
            bindings = <&parentheses_carrot_R>;
            key-positions = <33 32>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <26 25>;
        };

        s_c_l {
            bindings = <&square_curly_L>;
            key-positions = <59 60 45 46>;
        };

        s_c_r {
            bindings = <&square_curly_R>;
            key-positions = <60 61 46 47>;
        };

        closed_p_c {
            bindings = <&closed_parentheses_carrots>;
            key-positions = <31 32 33>;
        };

        closed_s_c {
            bindings = <&closed_square_curly>;
            key-positions = <60 61 59 45 46 47>;
        };

        multiply {
            bindings = <&kp ASTERISK>;
            key-positions = <20 32>;
        };

        forward-slash {
            bindings = <&kp SLASH>;
            key-positions = <60 32 46>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 31>;
        };

        subtract {
            bindings = <&kp MINUS>;
            key-positions = <59 31 45>;
        };

        caret-up {
            bindings = <&kp CARET>;
            key-positions = <18 30>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <58 30 44>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <21 33>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <61 33 47>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <17 29>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 28>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <15 27>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <14 26>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <13 25>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <25 37>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <26 38>;
        };

        back-slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <27 39>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <40 28>;
        };

        tilde {
            bindings = <&kp GRAVE>;
            key-positions = <29 41>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <52 55>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3  &kp N4    &kp N5                                           &kp N6         &kp N7   &kp N8     &kp N9   &kp N0    &kp GRAVE
&kp TAB           &kp Q   &kp W   &kp E   &kp R     &kp T                                            &kp Y          &kp U    &kp I      &kp O    &kp P     &kp MINUS
&kp LEFT_SHIFT    &kp A   &kp S   &kp D   &kp F     &kp G                                            &kp H          &kp J    &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C   &kp V     &kp B        &arrowfuncs 0 0    &arrowfuncs 0 0  &kp N          &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp RGUI
                                  &to 1   &kp LALT  &lt 3 SPACE  &smart_shift       &lt 4 ENTER      &kp BACKSPACE  &kp DEL  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        basic {
            display-name = "basic";
            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3  &kp N4    &kp N5                                         &kp N6         &kp N7   &kp N8     &kp N9   &kp N0    &kp GRAVE
&kp TAB           &kp Q   &kp W   &kp E   &kp R     &kp T                                          &kp Y          &kp U    &kp I      &kp O    &kp P     &kp MINUS
&kp LEFT_SHIFT    &kp A   &kp S   &kp D   &kp F     &kp G                                          &kp H          &kp J    &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C   &kp V     &kp B      &arrowfuncs 0 0    &arrowfuncs 0 0  &kp N          &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                  &to 0   &kp LALT  &kp SPACE  &smart_shift       &kp ENTER        &kp BACKSPACE  &kp DEL  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &trans
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans          &trans     &trans        &trans     &trans    &trans
&kp GRAVE   &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                          &kp N6          &kp N7     &kp N8        &kp N9     &kp N0    &kp KP_DOT
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans    &trans
&kp F7      &kp F8        &kp F9        &kp F10       &kp F11       &kp F12       &trans    &trans  &kp KP_PLUS     &kp MINUS  &kp EQUAL     &kp LBKT   &kp RBKT  &kp BSLH
                                        &trans        &trans        &trans        &trans    &trans  &trans          &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        symbols {
            display-name = "symbols";
            bindings = <
&trans     &trans        &trans         &trans                &trans                 &trans                              &trans          &trans           &trans         &trans  &trans  &trans
&kp GRAVE  &kp EXCL      &kp PIPE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans                              &trans          &trans           &trans         &trans  &trans  &trans
&trans     &kp KP_DOT    &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &thick_arrowfunc                    &kp EQUAL       &kp PLUS         &kp KP_MINUS   &trans  &trans  &trans
&trans     &kp QUESTION  &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &thin_arrowfunc   &trans    &trans  &kp UNDERSCORE  &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans  &trans  &trans
                                        &trans                &trans                 &kp ESCAPE        &trans    &trans  &trans          &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
